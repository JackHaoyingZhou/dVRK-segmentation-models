from pathlib import Path
import sys
from typing import List, Tuple
import cv2 as cv
from natsort import natsorted
from surg_seg.Utils.LabelGenerator import (
    LabelGenerator,
    AnnotationProcesses,
)
import click


def process_in_out_paths(input_dir: str, output_dir) -> Tuple[Path, Path]:
    input_dir = Path(input_dir)
    if output_dir is not None:
        output_dir = Path(output_dir)
    else:
        output_dir = Path.cwd() / "output"

    if not output_dir.exists():
        output_dir.mkdir(parents=True)

    sub_folder_name = output_dir / input_dir.name
    sub_folder_name.mkdir(exist_ok=True)

    return input_dir.resolve(), output_dir.resolve()


def parse_annotation_type(annotation_type: list) -> int:
    if "all" in annotation_type:
        return list(AnnotationProcesses)

    labels_to_generate: List[AnnotationProcesses] = []
    for annotation in annotation_type:
        if annotation == "2colors":
            labels_to_generate.append(AnnotationProcesses.annotation2colors)
        elif annotation == "4colors":
            labels_to_generate.append(AnnotationProcesses.annotation4colors)
        elif annotation == "5colors":
            labels_to_generate.append(AnnotationProcesses.annotation5colors)

    labels_to_generate.append(AnnotationProcesses.raw)
    labels_to_generate.append(AnnotationProcesses.annotationAMBF)

    return labels_to_generate


def create_output_dirs(input_dir, output_dir, annotations_to_generate):
    category_folder_name = list()
    for catg in annotations_to_generate:
        new_subfolder = output_dir / input_dir.name / catg.name
        category_folder_name.append(new_subfolder)
        new_subfolder.mkdir(exist_ok=True)
    return category_folder_name


@click.command()
@click.option(
    "--input_dir",
    "-i",
    type=str,
    required=True,
    help="path to the folder that contains the image folder, i.e. ~/data/rec01",
)
@click.option(
    "output_dir",
    "-o",
    type=str,
    required=False,
    default=None,
    help="output directory, default is current working directory.",
)
@click.option(
    "sample_every", "-s", type=int, default=10, help="sample every n frames, default is 10."
)
@click.option(
    "--annotation_type",
    "-a",
    type=click.Choice(["all", "2colors", "4colors", "5colors"]),
    default=["5colors"],
    multiple=True,
    help="Define which annotations to generate, default is 5colors",
)
def main(input_dir, output_dir, sample_every, annotation_type):
    """
    Generate training labels from raw ambf recorded data. To use this script
    you need to specify a input_path containing the raw images generated by the
    `ros_video_record.py` script. The output_dir is optional. If not specified,
    the output will be saved in the current working directory.

    generate_segmentation_labels.py -i rec06 -o out -s 5 -a 4colors -a 5colors
    """

    input_dir, output_dir = process_in_out_paths(input_dir, output_dir)

    annotations_to_generate = parse_annotation_type(annotation_type)

    category_folder_name = create_output_dirs(input_dir, output_dir, annotations_to_generate)

    print(f"Input folder: {input_dir}")
    print(f"Output folder: {output_dir}\n")

    # ---------------------------------------------
    # output file setup
    # ---------------------------------------------
    width, height = 1280, 480
    frameSize = (int(width / 2), height)

    filenames = natsorted(input_dir.glob("*.png"))
    fourcc = cv.VideoWriter_fourcc(*"DIVX")
    print("-- Initiation complete, start annotating...")

    # ---------------------------------------------
    # start processing raw images
    # ---------------------------------------------
    total_processes = len(annotations_to_generate)
    process: AnnotationProcesses
    for idx, process in enumerate(annotations_to_generate):
        vid = cv.VideoWriter(
            str(category_folder_name[idx] / f"{input_dir.name}_seg_{process.name}.avi"),
            fourcc,
            2,
            frameSize,
        )

        counter = 0
        total = len(filenames) / sample_every + 1

        for img in filenames:
            cur_img = LabelGenerator(str(img))

            if int(cur_img.seg_str) % sample_every == 0:

                if process == AnnotationProcesses.raw:
                    new_img = cur_img.get_rawImage()
                elif process == AnnotationProcesses.annotationAMBF:
                    new_img = cur_img.get_ambfAnnotation()
                else:
                    new_img = cur_img.get_annotation(process.value)  ###HERE

                output_name = f"{int(cur_img.seg_str):06d}"
                cv.imwrite(
                    str(category_folder_name[idx] / f"img_{output_name}.png"), new_img
                )  ###HERE
                vid.write(new_img)

                counter += 1
                sys.stdout.write(
                    f"\r-- Annotation {idx+1} / {total_processes} | Progress {counter/total*100.0:02.1f}"
                )
                sys.stdout.flush()

        vid.release()
    print("\n Annotation formatting complete!")


if __name__ == "__main__":
    main()
